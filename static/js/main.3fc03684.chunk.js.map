{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/HomePage.tsx","components/logo.png","Root.tsx","index.tsx"],"names":["Navbar","handleActiveLink","isActive","cn","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","sex","centuries","handleCenturiesChange","century","includes","filter","c","map","item","toLowerCase","type","placeholder","length","query","Loader","PersonLink","person","slug","name","PeopleTable","preparedPeople","setPreparedPeople","sort","order","handleSortChange","sortBy","result","isSortBy","isDesc","useEffect","sortedPeople","a","b","comparison","localeCompare","born","died","useParams","getParent","parentName","find","motherName","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","getpeople","setGetPeople","error","setError","isLoading","setIsLoading","get","getAll","filteredPeople","finishPeople","startYear","endYear","people","getPeople","catch","HomePage","Root","path","element","index","replace","src","logo","alt","width","height","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3fc03684.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  const handleActiveLink = ({ isActive }: { isActive: boolean }) => {\n    return cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={handleActiveLink}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={handleActiveLink}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\n// import { useEffect } from 'react';\nimport { SearchLink } from './SearchLink';\nimport { Person } from '../types';\n\ntype Props = {\n  sex: string;\n  centuries: string[];\n  preparedPeople: Person[];\n  setPreparedPeople: React.Dispatch<React.SetStateAction<Person[]>>;\n  getpeople: Person[];\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  sex,\n  centuries,\n  // preparedPeople,\n  // setPreparedPeople,\n  // getpeople,\n}) => {\n  const arrCenturies = [16, 17, 18, 19, 20];\n  const handleCenturiesChange = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n  };\n\n  const handleFilterSex = (filter: string) => {\n    const sexFilter = { sex: filter };\n\n    return sexFilter;\n  };\n\n  const sexFilters = ['Male', 'Female'];\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        {sexFilters.map((item) => (\n          <SearchLink\n            className={cn({ 'is-active': sex === item[0].toLowerCase() })}\n            params={handleFilterSex(`${(item[0].toLowerCase())}`)}\n          >\n            {item}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n\n            {arrCenturies.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(`${century}`),\n                })}\n                params={{ centuries: handleCenturiesChange(`${century}`) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person,\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n      to={`/people/${person.slug}`}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","// import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport cn from 'classnames';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\nimport { Person } from '../types';\n\ntype Props = {\n  getpeople: Person[];\n  preparedPeople: Person[];\n  setPreparedPeople: React.Dispatch<React.SetStateAction<Person[]>>\n  sort: string;\n  order: string;\n  centuries: string[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  // getpeople,\n  preparedPeople,\n  setPreparedPeople,\n  sort,\n  order,\n  // centuries,\n}) => {\n  const handleSortChange = (sortBy: string) => {\n    let result: {\n      sort: string | null;\n      order: string | null;\n    } = { sort: sortBy, order: 'desc' };\n    const isSortBy = sort === sortBy;\n    const isDesc = order === 'desc';\n\n    if (isSortBy && isDesc) {\n      result = { sort: null, order: null };\n    }\n\n    if (!isSortBy && !isDesc) {\n      result = { sort: sortBy, order: null };\n    }\n\n    if (!isSortBy && isDesc) {\n      result = { sort: sortBy, order: null };\n    }\n\n    return result;\n  };\n\n  useEffect(() => {\n    const sortedPeople = [...preparedPeople];\n\n    if (sort) {\n      sortedPeople.sort((a, b) => {\n        let comparison = 0;\n\n        switch (sort) {\n          case 'name':\n            comparison = a.name.localeCompare(b.name);\n            break;\n          case 'sex':\n            comparison = a.sex.localeCompare(b.sex);\n            break;\n          case 'born':\n            comparison = a.born - b.born;\n            break;\n          case 'died':\n            comparison = a.died - b.died;\n            break;\n          default:\n            break;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      });\n    }\n\n    setPreparedPeople(sortedPeople);\n  }, [sort, order]);\n\n  const { slug } = useParams();\n  const getParent = (name: string | null) => {\n    if (!name) {\n      return '-';\n    }\n\n    const parentName = preparedPeople.find((person) => person.name === name);\n\n    if (parentName) {\n      return <PersonLink person={parentName} />;\n    }\n\n    return name;\n  };\n\n  const paramSort = ['Name', 'Sex', 'Born', 'Died'];\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {paramSort.map((key) => (\n            <>\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <SearchLink params={handleSortChange(`${(key.toLowerCase())}`)}>\n                    <span className=\"icon\">\n                      <i\n                        className={cn('fas fa-sort', {\n                          'fa-sort-up': !order && sort === key.toLowerCase(),\n                          'fa-sort-down': order && sort === key.toLowerCase(),\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            </>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedPeople.map((person) => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>{getParent(person.motherName)}</td>\n            <td>{getParent(person.fatherName)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [getpeople, setGetPeople] = useState<Person[]>([]);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const [preparedPeople, setPreparedPeople] = useState([...getpeople]);\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    const filteredPeople = [...getpeople];\n    let finishPeople = [...filteredPeople];\n\n    centuries.forEach((century) => {\n      const startYear = (+century - 1) * 100 + 1;\n      const endYear = +century * 100;\n      // console.log(startYear, endYear);\n\n      finishPeople = finishPeople.filter((people) => {\n        return (\n          (people.born >= startYear && people.born <= endYear)\n          || (people.died >= startYear && people.died <= endYear)\n        );\n      });\n    });\n    setPreparedPeople(finishPeople);\n  }, [searchParams]);\n  // console.log(getpeople);\n  // console.log(centuries);\n  // console.log(preparedPeople);\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(people => {\n        if (!people.length) {\n          setError('There are no people on the server');\n        }\n\n        setGetPeople(people);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setError('Something went wrong');\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters\n              sex={sex}\n              centuries={centuries}\n              preparedPeople={preparedPeople}\n              getpeople={getpeople}\n              setPreparedPeople={setPreparedPeople}\n            />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n              {!!error && (\n                <>\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    {error}\n                  </p>\n                  {getpeople.length <= 0 && (\n                    <p data-cy=\"noPeopleMessage\">\n                      {error}\n                    </p>\n                  )}\n                </>\n              )}\n\n              <p>There are no people matching the current search criteria</p>\n              {getpeople.length > 0 && !isLoading && (\n                <PeopleTable\n                  getpeople={getpeople}\n                  // searchParams={searchParams}\n                  preparedPeople={preparedPeople}\n                  setPreparedPeople={setPreparedPeople}\n                  sort={sort}\n                  order={order}\n                  centuries={centuries}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export default __webpack_public_path__ + \"static/media/logo.d22859e6.png\";","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\nimport { HomePage } from './components/HomePage';\n// import { PeopleFilters } from './components/PeopleFilters';\n// import { PeopleTable } from './components/PeopleTable';\nimport logo from './components/logo.png';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n        <Route\n          path=\"*\"\n          element={(\n            <>\n              <h1 className=\"title\">Page not found</h1>\n              <img\n                src={logo}\n                alt=\"error not found\"\n                width=\"200\"\n                height=\"200\"\n              />\n            </>\n          )}\n        />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}